import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useMessage } from '../hooks/useMessage';
import { BusinessProvider } from './BusinessProvider';
import { UserProvider } from './UserProvider';
export const ExperienceContext = createContext({});
export const useExperience = () => useContext(ExperienceContext);
export const ExperienceProvider = (props) => {
    const location = useLocation();
    const { sendToParent } = useMessage();
    useEffect(() => {
        sendToParent({ type: 'WEB_VIEW_READY', payload: true });
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    useEffect(() => {
        sendToParent({ type: 'HISTORY_CHANGE', payload: 'HISTORY_CHANGE' });
    }, [sendToParent, location]);
    const sendAnalyticsEvent = (type, payload) => {
        sendToParent({ type: 'SEND_ANALYTICS', payload: { type, payload } });
    };
    const postHeaderMessage = (msg) => {
        sendToParent({ type: 'POST_HEADER_MESSAGE', payload: { title: msg } });
    };
    const navigateToExternalBrowser = (url) => {
        sendAnalyticsEvent('openURL', { url });
        sendToParent({
            type: 'NAVIGATE_TO_EXTERNAL_BROWSER',
            payload: {
                url: url
            }
        });
    };
    const navigateToWallet = () => {
        sendToParent({ type: 'NAVIGATE_TO_WALLET' });
    };
    const navigateToNFTDetail = (tokenId, businessIdOrName) => {
        sendToParent({
            type: 'NAVIGATE_TO_TOKEN',
            payload: {
                tokenId,
                businessIdOrName
            }
        });
    };
    const sendEmail = (email) => {
        const url = 'mailto:' + email;
        sendAnalyticsEvent('openURL', { url });
        sendToParent({
            type: 'NAVIGATE_TO_EXTERNAL_BROWSER',
            payload: { url: url }
        });
    };
    const openSpace = (alias) => {
        sendToParent({ type: 'OPEN_SPACE', payload: { alias: alias } });
    };
    const callSpace = (alias) => {
        sendToParent({ type: 'CALL_SPACE', payload: { alias: alias } });
    };
    return (_jsx(ExperienceContext.Provider, { value: {
            analytics: { event: sendAnalyticsEvent },
            postHeaderMessage,
            navigateToExternalBrowser,
            sendEmail,
            openSpace,
            callSpace,
            navigateToWallet,
            navigateToNFTDetail
        }, children: _jsx(UserProvider, { children: _jsx(BusinessProvider, { children: props.children }) }) }));
};
//# sourceMappingURL=ExperienceProvider.js.map