import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useState } from 'react';
import { useMessage } from '../hooks/useMessage';
export const UserContext = createContext({});
export const UserProvider = (props) => {
    const [user, setUser] = useState();
    const [accessToken, setaccessToken] = useState(null);
    const [campaignUserInfo, setCampaignUserInfo] = useState();
    const [userBusinessInfo, setUserBusinessInfo] = useState();
    const { sendToParent } = useMessage();
    useMessage('GET_ACCES_TOKEN', (_, payload) => {
        setaccessToken(payload);
    });
    useMessage('GET_USER', (_, payload) => {
        if (payload) {
            setUser(payload);
        }
    });
    useMessage('GET_USER_INFO', (_, payload) => {
        if (payload) {
            setUserBusinessInfo(payload);
        }
    });
    useMessage('GET_CAMPAIGN_USER_INFO', (_, payload) => {
        setCampaignUserInfo(payload);
    });
    function updateUserCampaignInfo(payload) {
        sendToParent({ type: 'UPDATE_CAMPAIGN_USER_INFO', payload: payload });
    }
    function getUserBusinessInfo() {
        sendToParent({ type: 'GET_USER_INFO' });
    }
    return (_jsx(UserContext.Provider, { value: {
            user,
            accessToken,
            campaignUserInfo,
            updateUserCampaignInfo,
            userBusinessInfo,
            getUserBusinessInfo
        }, children: props.children }));
};
//# sourceMappingURL=UserProvider.js.map