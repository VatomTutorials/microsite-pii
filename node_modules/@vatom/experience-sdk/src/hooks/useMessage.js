import { useCallback, useEffect, useRef, useState } from 'react';
const postMessage = (data, target, origin = '*') => {
    return target
        ? target?.postMessage(JSON.stringify(data))
        : window?.parent?.postMessage(JSON.stringify(data), '*');
};
/**
 * It listens for a specific message type, and when it receives it, it calls the event handler with the
 * message payload and a function to send a message back to the sender
 * @param {string} watch - string
 * @param {EventHandler} eventHandler - This is the function that will be called when the event is
 * triggered.
 * @returns An object with two properties: history and sendToParent.
 */
export const useMessage = (watch, eventHandler) => {
    const [history, setHistory] = useState([]);
    const [origin, setOrigin] = useState();
    const [source, setSource] = useState(null);
    const originRef = useRef();
    const sourceRef = useRef(null);
    originRef.current = origin;
    sourceRef.current = source;
    const sendToSender = (data) => postMessage(data, sourceRef.current, originRef.current);
    const sendToParent = (data) => {
        const { ReactNativeWebView } = window;
        postMessage(data, ReactNativeWebView);
    };
    const onWatchEventHandler = useCallback((event) => {
        try {
            const { origin, source, data: unparsedData } = event;
            const data = unparsedData.data ? JSON.parse(unparsedData.data) : unparsedData;
            if (data.type && watch && data.type === watch) {
                const message = data;
                setSource(source);
                setOrigin(origin);
                setHistory(old => [...old, message.payload]);
                if (eventHandler)
                    eventHandler(sendToSender, message.payload);
            }
        }
        catch (error) {
            return;
        }
    }, [watch, eventHandler, setSource, setOrigin]);
    useEffect(() => {
        document.addEventListener('message', onWatchEventHandler);
        return () => document.removeEventListener('message', onWatchEventHandler);
    }, [eventHandler, onWatchEventHandler, watch]);
    useEffect(() => {
        window.addEventListener('message', onWatchEventHandler);
        return () => window.removeEventListener('message', onWatchEventHandler);
    }, [watch, origin, onWatchEventHandler]);
    return { history, sendToParent };
};
//# sourceMappingURL=useMessage.js.map