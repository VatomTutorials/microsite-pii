import { IPostMessage, MessageTypes } from '../types';
declare type EventHandler<T extends MessageTypes> = (callback: (data: IPostMessage<MessageTypes>) => unknown, payload: IPostMessage<T>['payload']) => unknown;
/**
 * It listens for a specific message type, and when it receives it, it calls the event handler with the
 * message payload and a function to send a message back to the sender
 * @param {string} watch - string
 * @param {EventHandler} eventHandler - This is the function that will be called when the event is
 * triggered.
 * @returns An object with two properties: history and sendToParent.
 */
export declare const useMessage: <T extends keyof import("../types").MessageList>(watch?: T | undefined, eventHandler?: EventHandler<T> | undefined) => {
    history: IPostMessage<T>["payload"][];
    sendToParent: (data: IPostMessage<MessageTypes>) => void;
};
export {};
