import { useRef } from 'react';
import { useMessage } from './useMessage';
export const useShare = () => {
    const sharePromise = useRef(null);
    const promiseResolve = useRef(null);
    const promiseReject = useRef(null);
    const clean = () => {
        promiseResolve.current = null;
        promiseReject.current = null;
        sharePromise.current = null;
    };
    const { sendToParent } = useMessage('SHARE_RESPONSE', (_, payload) => {
        if (sharePromise.current && promiseResolve.current) {
            promiseResolve.current(payload);
            clean();
        }
    });
    useMessage('SHARE_ERROR', (_, payload) => {
        if (sharePromise.current && promiseReject.current) {
            promiseReject.current(payload);
            clean();
        }
    });
    const share = async (options) => {
        if (sharePromise.current) {
            return sharePromise.current;
        }
        sharePromise.current = new Promise((resolve, reject) => {
            promiseResolve.current = resolve;
            promiseReject.current = reject;
            if (window.ReactNativeWebView) {
                sendToParent({ type: 'SHARE', payload: options });
            }
        });
        return sharePromise.current;
    };
    return share;
};
//# sourceMappingURL=useShare.js.map