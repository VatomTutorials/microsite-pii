import { CSSProperties } from 'react';
export declare type PlatformOSType = 'ios' | 'android' | 'macos' | 'windows' | 'web' | 'native';
export declare enum ThemesEnum {
    light = "light",
    dark = "dark",
    system = "system"
}
/**
 * key: message.type
 * value: message.payload
 */
export interface MessageList {
    WEB_VIEW_READY: boolean;
    GET_USER: UserType;
    GET_USER_INFO?: any;
    GET_BUSINESS: BusinessType;
    GET_BUSINESS_TOKENS: PublicTokenType[];
    HISTORY_CHANGE: string;
    GET_ACCES_TOKEN: string | null;
    GET_CAMPAIGN_USER_INFO?: any;
    UPDATE_CAMPAIGN_USER_INFO: any;
    POST_HEADER_MESSAGE: PostHeaderMessagePayload;
    GET_PLATAFORM_OS_TYPE: PlatformOSType;
    SEND_ANALYTICS: AnalyticsPayload;
    NAVIGATE_TO_EXTERNAL_BROWSER: {
        url: string;
    };
    SHARE: ShareOptions;
    SHARE_RESPONSE: ShareOpenResult;
    SHARE_ERROR: any;
    /**
     * Site requests the app to do a native goBack()
     */
    NATIVE_GO_BACK?: undefined;
    /**
     * App tells the site that the back button has been pressed if a subscription exists
     */
    BACK_BUTTON_PRESSED: undefined;
    /**
     * site tells the app that a subscription has been created
     */
    SUBSCRIBE_GO_BACK: undefined;
    /**
     * site tells the app that the subscription has been removed
     */
    UNSUBSCRIBE_GO_BACK: undefined;
    /**
     * site tells the app that open space
     */
    OPEN_SPACE: SpacePayload;
    CALL_SPACE: SpacePayload;
    NAVIGATE_TO_WALLET: undefined;
    /**
     * app tells the site to go back
     */
    SITE_GO_BACK: undefined;
    NAVIGATE_TO_TOKEN: {
        tokenId: string;
        businessIdOrName: string;
    };
}
export declare type MessageTypes = keyof MessageList;
export declare type IPostMessage<T extends MessageTypes> = MessageList[T] extends undefined ? {
    type: T;
    payload?: MessageList[T];
    data?: string;
} : {
    type: T;
    payload: MessageList[T];
    data?: string;
};
export declare type RNMessage = WebViewMessageEvent['nativeEvent'];
export interface WebViewMessageDataOverride<T extends MessageTypes> extends Omit<RNMessage, 'data'> {
    data: IPostMessage<T>;
}
export interface ExperienceTypes {
    analytics: {
        event: (type: string, payload: any) => void;
    };
    postHeaderMessage: (headerTittle: string) => void;
    navigateToExternalBrowser: (url: string) => void;
    sendEmail: (emailAddress: string) => void;
    openSpace: (alias: string) => void;
    callSpace: (alias: string) => void;
    navigateToWallet: () => void;
    navigateToNFTDetail: (tokenId: string, businessIdOrName: string) => void;
}
export declare type SpacePayload = {
    alias: string;
};
export interface AnalyticsPayload {
    type: string;
    payload?: any;
}
/**
 * *
 * Business
 */
export declare type PageConfigInterface = {
    showHomePageIcon: boolean;
    icon: string;
    theme: {
        header: {
            logo: string | {
                src: string;
                style: CSSProperties;
            };
        };
        iconTitle?: CSSProperties;
        emptyContainer?: CSSProperties;
        icon?: CSSProperties;
        main: CSSProperties;
        emptyState: CSSProperties;
        pointsHeader?: CSSProperties;
        pageTheme?: ThemesEnum;
    };
    text: {
        emptyState: string;
    };
    features: {
        businessHeader: {
            title: boolean;
        };
        footer: {
            icons: [
                {
                    link: string;
                    src: string;
                    title: string;
                    id: string;
                }
            ];
            enabled: boolean;
        };
        vatom: {
            autoOpen: any;
            disableNewTokenToast: boolean;
            ignoreNewTokenToast: string[];
            pinned?: string[];
        };
        pointsHeader?: {
            channel: string;
            enabled: boolean;
            position: string;
            title: string;
        };
        icon?: {
            badges?: boolean;
            editions?: boolean;
            titles?: boolean;
        };
    };
};
export declare type BusinessType = {
    id: string;
    name: string;
    displayName: string;
    logoSrc: string;
    createdAt: number;
    pageConfig: PageConfigInterface;
    defaultCampaignId: string;
};
/**
 * *
 * User
 */
export declare type UserType = {
    bio: string;
    default_business_id: string;
    default_space_id: string;
    email: string;
    email_verified: boolean;
    location: LocationType;
    name: string;
    phone_number: string;
    phone_number_verified: boolean;
    picture: string;
    sub: string;
    expires_at: number;
    updated_at: number;
    wallet_address: string;
    website: string;
    guest: boolean;
};
export declare type LocationType = {
    country: string;
    latitude: number;
    locality: string;
    longitude: number;
    postal_code: string;
    region: string;
};
export declare type PostHeaderMessagePayload = {
    title: string | null;
};
export interface PointsPayload {
    entries: string;
    total: string;
}
/**
 * UseUser
 */
export declare type UserProviderTypes<CampaignUserInfo = unknown, UserBusinessInfo = unknown> = {
    user?: UserType;
    accessToken: string | null;
    campaignUserInfo?: CampaignUserInfo;
    userBusinessInfo?: UserBusinessInfo;
    updateUserCampaignInfo: (campaignUserInfo: CampaignUserInfo) => void;
    getUserBusinessInfo: () => void;
};
/**
 * UseBusiness
 */
export declare type BusinessProviderTypes = {
    business?: BusinessType;
    tokens: PublicTokenType[];
};
/**
 * token type, TODO: validate format
 */
export declare type attributeType = {
    trait_type: string;
    value: string | number;
};
export declare type metadataType = {
    animation_url: string | undefined;
    attributes: attributeType[];
    background_color: string | undefined;
    contract_data: string | undefined;
    description?: string;
    external_uri?: string;
    image?: string;
    name?: string;
    youtube_url: string | undefined;
};
export declare type studioInfoType = {
    blueprintId: string;
    businessId: string;
    campaignId: string;
    objectDefinitionId: string;
};
export declare type tokenPositionType = {
    coordinates: number[];
    type: string;
};
export declare type PublicTokenType = {
    tokenId: string;
    metadata: metadataType;
    studioInfo: studioInfoType;
    position: tokenPositionType | undefined;
};
export interface ShareSingleResult {
    message: string;
    success: boolean;
}
export interface ShareOpenResult extends ShareSingleResult {
    dismissedAction?: boolean;
}
export interface ActivityItemSource {
    placeholderItem: ActivityItem;
    item: {
        [key in ActivityType]?: ActivityItem | null | undefined;
    };
    subject?: {
        [key in ActivityType]?: string;
    };
    dataTypeIdentifier?: {
        [key in ActivityType]?: string;
    };
    thumbnailImage?: {
        [key in ActivityType]?: string;
    };
    linkMetadata?: LinkMetadata;
}
export interface LinkMetadata {
    originalUrl?: string;
    url?: string;
    title?: string;
    icon?: string;
    image?: string;
    remoteVideoUrl?: string;
    video?: string;
}
export interface ActivityItem {
    type: 'text' | 'url';
    content: string;
}
export declare type ActivityType = 'default' | 'addToReadingList' | 'airDrop' | 'assignToContact' | 'copyToPasteBoard' | 'mail' | 'message' | 'openInIBooks' | 'postToFacebook' | 'postToFlickr' | 'postToTencentWeibo' | 'postToTwitter' | 'postToVimeo' | 'postToWeibo' | 'print' | 'saveToCameraRoll' | 'markupAsPDF';
export interface ShareOptions {
    message?: string;
    title?: string;
    url?: string;
    urls?: string[];
    type?: string;
    subject?: string;
    email?: string;
    recipient?: string;
    excludedActivityTypes?: ActivityType[] | string[];
    failOnCancel?: boolean;
    showAppsToView?: boolean;
    filename?: string;
    filenames?: string[];
    saveToFiles?: boolean;
    activityItemSources?: any;
    isNewTask?: boolean;
}
declare type NodeHandle = number;
export interface WebViewMessage extends WebViewNativeEvent {
    data: string;
}
export interface WebViewNativeEvent {
    url: string;
    loading: boolean;
    title: string;
    canGoBack: boolean;
    canGoForward: boolean;
    lockIdentifier: number;
}
export interface NativeSyntheticEvent<T> extends React.BaseSyntheticEvent<T, NodeHandle, NodeHandle> {
}
export declare type WebViewMessageEvent = NativeSyntheticEvent<WebViewMessage>;
export {};
